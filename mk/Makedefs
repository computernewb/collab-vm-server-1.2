# Makedefs: 
# Common makefile stuff for building the CollabVM Server.
# Allows easy porting!

CCFLAGS = -Isrc

# Build type switches
# debug mode, disable optimizations and note debugging
ifeq ($(DEBUG),1)

CCFLAGS += -g -O0 -D_DEBUG -DDEBUG
LDFLAGS += -g

# Enable asan instrumentation if DEBUG=1
# and ASAN=1
ifeq ($(ASAN),1)
CCFLAGS += -fsanitize=address
LDFLAGS += -fsanitize=address
endif

# Enable tsan instrumentation if DEBUG=1
# and TSAN=1
ifeq ($(TSAN),1)

ifeq ($(ASAN),1)
$(error TSAN=1 and ASAN=1 are not compatiable)
endif

CCFLAGS += -fsanitize=thread
LDFLAGS += -fsanitize=thread
endif

else

# release mode, build with optimizations and strip binaries
CCFLAGS += -O3 -ffast-math -march=native -mtune=native
LDFLAGS = -s

endif

ifeq ($(JPEG), 1) 
# using JPEG instead of PNG
CCFLAGS += -DUSE_JPEG
endif

TOP := $(PWD)

# TODO: cmake.. cmake... CMAKE... fucking hell use CMAKE

# TODO: we should also allow -DBOOST_ASIO_NO_DEPRECATED=1
# but that breaks a LOT of code for the time being

BOOST_DEFS = \
	-DBOOST_ASIO_DISABLE_BOOST_ARRAY=1 \
	-DBOOST_ASIO_DISABLE_BOOST_BIND=1 \
	-DBOOST_ASIO_DISABLE_BOOST_DATE_TIME=1 \
	-DBOOST_ASIO_DISABLE_BOOST_REGEX=1 \
	-DBOOST_ASIO_SEPARATE_COMPILATION=1 \
	-DBOOST_BEAST_SEPARATE_COMPILATION=1 \

# TODO: Remove -fpermissive, all -Wno- and enable -Wall + -Wextra.
CXXFLAGS = $(CCFLAGS) -Wno-deprecated-declarations -Wno-deprecated -Wno-write-strings \
		-fpermissive -std=c++20 $(EXTRAINCS) \
		-I$(TOP)/vendor/rapidjson/include -I$(TOP)/vendor/sqlite_orm/include -Isrc/Database -Isrc/VMControllers \
		-Isrc/Sockets -Isrc/guacamole -Isrc/util -Isrc/cpr -I$(OBJDIR) -DRAPIDJSON_HAS_CXX11_RVALUE_REFS $(BOOST_DEFS)

# GCC dependency generation
DEPGEN = -MT $@ -MD -MP -MF $(OBJDIR)/$*.d

.PHONY: all clean hardclean

# All objects
OBJS = $(OBJDIR)/Main.o                          \
       $(OBJDIR)/asio_implementation.o		 \
       $(OBJDIR)/beast_implementation.o		 \
       $(OBJDIR)/CollabVM.o                      \
       $(OBJDIR)/Database.o                      \
       $(OBJDIR)/QEMUController.o                \
       $(OBJDIR)/VMController.o                  \
       $(OBJDIR)/QMPClient.o                     \
       $(OBJDIR)/unicode.o                       \
       $(OBJDIR)/error.o                         \
       $(OBJDIR)/guac_clipboard.o                \
       $(OBJDIR)/guac_cursor.o                   \
       $(OBJDIR)/guac_display.o                  \
       $(OBJDIR)/guac_dot_cursor.o               \
       $(OBJDIR)/guac_iconv.o                    \
       $(OBJDIR)/guac_list.o                     \
       $(OBJDIR)/guac_pointer_cursor.o           \
       $(OBJDIR)/guac_rect.o                     \
       $(OBJDIR)/guac_string.o                   \
       $(OBJDIR)/guac_surface.o                  \
       $(OBJDIR)/hash.o                          \
       $(OBJDIR)/id.o                            \
       $(OBJDIR)/palette.o                       \
       $(OBJDIR)/pool.o                          \
       $(OBJDIR)/protocol.o                      \
       $(OBJDIR)/timestamp.o                     \
       $(OBJDIR)/GuacSocket.o                    \
       $(OBJDIR)/GuacWebSocket.o                 \
       $(OBJDIR)/GuacBroadcastSocket.o           \
       $(OBJDIR)/GuacClient.o                    \
       $(OBJDIR)/GuacUser.o                      \
       $(OBJDIR)/GuacVNCClient.o                 \
       $(OBJDIR)/GuacInstructionParser.o         \
       $(OBJDIR)/ChildProcess.o			 \
       $(OBJDIR)/CommandLine.o			 \
       $(OBJDIR)/server.o                        \
       $(OBJDIR)/websocket_user.o                \
       $(OBJDIR)/listener.o                      \
       $(OBJDIR)/http_util.o

# websocketmm

# Add supporting code to the objects list
# for JPEG
ifeq ($(JPEG), 1)
OBJS += $(OBJDIR)/cairo_jpg.o
endif

# Set the VPATH to all of the possible source tree locations.
# This decomplicates a lot of this file and makes it easier to understand
VPATH := src/             \
	$(OBJDIR)         \
        src/uriparser     \
        src/Database      \
        src/Sockets       \
        src/VMControllers \
        src/guacamole     \
        src/guacamole/vnc \
        src/websocketmm   \
	src/util

all: $(BINDIR)/ $(OBJDIR)/ $(BINDIR)/collab-vm-server

$(BINDIR)/:
	@mkdir -p $@

$(OBJDIR)/:
	mkdir -p $@

# meta-rules

clean:
	$(info Cleaning "$(BINDIR)/")
	$(RM) -r $(BINDIR)
	$(info Cleaning "$(OBJDIR)/")
	$(RM) -r $(OBJDIR)/*.o $(OBJDIR)/*.cxx $(OBJDIR)/*.hxx $(OBJDIR)/*.ixx

# WARNING: this will reset dependency files too
hardclean:
	$(info Cleaning "$(BINDIR)/")
	$(RM) -r $(BINDIR)
	$(info Cleaning "$(OBJDIR)/")
	$(RM) -r $(OBJDIR)

# Link rules

$(BINDIR)/collab-vm-server: $(OBJS)
	$(info Linking executable $@)
	$(CXX) $(LDFLAGS) $(OBJS) $(LIBS) -o $@


# C/C++ compile rules

$(OBJDIR)/%.o: %.cpp
	$(info Compiling C++ source file $<)
	$(CXX) -c $< $(CXXFLAGS) $(DEPGEN) -o $@ 

$(OBJDIR)/%.o: %.cxx
	$(info Compiling C++ source file $<)
	$(CXX) -c $< $(CXXFLAGS) $(DEPGEN) -o $@

$(OBJDIR)/%.o: %.c
	$(info Compiling C source file $<)
	$(CC) -c $< $(CCFLAGS) $(DEPGEN) -o $@

# include dependencies
-include $(wildcard $(OBJDIR)/*.d)

# Little fun make trick! This will expand usually to
# ".SILENT:" which means make rules won't output commands
# but when V is set to anything, it will expand to
# something meaningless, allowing commands to output.
$V.SILENT:
