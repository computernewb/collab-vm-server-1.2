//
// CollabVM 3
//
// (C) 2021-2022 CollabVM Development Team
//
// SPDX-License-Identifier: GPL-3.0
//

// Control layer tables/messages

include "types.fbs";

namespace collab3.proto;

enum MouseButton : ubyte {
    /// No mouse buttons
    NONE = 0x0,

    LEFT = 0x1,
    MIDDLE = 0x2,
    RIGHT = 0x4,

    // just to have 'em, even though
    // I don't think we can even pass them in, lol
    MOUSE4 = 0x8,
    MOUSE5 = 0x10
}

table ControlLayerKeyMessage {
    key: ushort;
    pressed: bool;
}

table ControlLayerMouseMessage {
    /// The current mouse buttons. May not be sent
    buttons: MouseButton = NONE;

    /// The current mouse position. May be relative or absolute.
    mouse_position: RectUS (required);

    /// True if the mouse is absolute rather than relative.
    mouse_absolute: bool;
}

/// Turn queue. Sent upon connection to VM and any updates to the turn queue
table ControlLayerTurnQueueMessage {
    /// true if the queue is paused (all other fields will not update)
    ///
    /// This will be true if:
    /// - only one user is turning (we intentionally pause the queue until another user turns)
    /// - an moderator or administrator has paused the queue manually
    paused: bool = false;

    /// time in milliseconds that the last entry will be enqueued,
    /// or 0 if paused/not applicable.
    enqueue_time: uint32;

    /// all waiting users.
    user_queue: [ObjectReference];
}

// N.B: it is not at all worth micro-optimizing this as hard, cause
// in this case these are always lightweight references (i.e: a snowflake).
//
// so sending e.g 2, 4, even 5 leave events is implicitly cheaper, since we don't send an
// entire user object over the wire for instances like that.
//
// also we don't have to parse numbers or any custom protocol. which kinda helps too.

enum ControlLayerUserEvent : ubyte {
    /// The user has joined.
    JOIN,

    /// The user has left.
    LEAVE,

    /// The user has changed their username
    /// (ask chat layer to send new user object?)
    USERNAME_CHANGED

    /// XXX Future events.
}

table ControlLayerUserEventMessage {
    user: ObjectReference (required);
    event: ControlLayerUserEvent;
}


table ControlLayerTurnRequestMessage {
    /// no data
}

union ControlLayerClientMessage {
    ControlLayerKeyMessage,
    ControlLayerMouseMessage,
    ControlLayerTurnRequestMessage
}

union ControlLayerServerMessage {
    ControlLayerTurnQueueMessage,
    ControlLayerUserEventMessage
}