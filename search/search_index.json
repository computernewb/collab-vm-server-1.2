{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Collab3 The next-generation of CollabVM. This site contains work in progress documentation for the Collab3 monorepo, and documentation for the individual components it builds. It is in no way authoritative (until this disclaimer is removed), and may change unexpectedly during early development. Quick Links Building Collab3 About Collab3 Setup","title":"Home"},{"location":"#collab3","text":"The next-generation of CollabVM. This site contains work in progress documentation for the Collab3 monorepo, and documentation for the individual components it builds. It is in no way authoritative (until this disclaimer is removed), and may change unexpectedly during early development.","title":"Collab3"},{"location":"#quick-links","text":"Building Collab3 About Collab3 Setup","title":"Quick Links"},{"location":"about/","text":"The Collab3 monorepo is a fully rewritten version of the CollabVM project. Philosophy One monorepo for everything in the project Checking out the repository shouldn't be painful Better development experience (one clone command versus 3-4...) No project submodules (less time needed to update a superproject, more time to write code) Fast, readable, and modular modern C++20 code Hacking on the codebase shouldn't be a daunting task Awaitable + coroutines really help with this on the ASIO front Development & additional features encouraged by core developers (hopefully made more possible by code clarity/design) Microservices for each core part of the Collab3 server Currently supported by design with the modular server/api, server/... libraries Which will be split into different services when ready.","title":"About"},{"location":"about/#philosophy","text":"One monorepo for everything in the project Checking out the repository shouldn't be painful Better development experience (one clone command versus 3-4...) No project submodules (less time needed to update a superproject, more time to write code) Fast, readable, and modular modern C++20 code Hacking on the codebase shouldn't be a daunting task Awaitable + coroutines really help with this on the ASIO front Development & additional features encouraged by core developers (hopefully made more possible by code clarity/design) Microservices for each core part of the Collab3 server Currently supported by design with the modular server/api, server/... libraries Which will be split into different services when ready.","title":"Philosophy"},{"location":"building/","text":"Compiling the Collab3 monorepo code is fairly easy. Notice Windows is not supported by the Collab3 developers, and the project will not configure if targeting a Windows platform. This is an intentional change, and it will not be reverted until: DBus p2p works on Windows Windows QEMU supports modules, and passing handles to and from QEMU and another process Dependencies GCC 11+ or Clang 14+ are recommended compiler versions, however newer versions are acceptable too. Libraries: Boost 1.75 or above fmt spdlog You can use either system library versions (if preferred) or use vcpkg for the grunt of them. Building Collab3 Monorepo C++ Code $ cmake -B build -GNinja -DCMAKE_BUILD_TYPE=Release $ cd build $ cmake --build . # or if you know your generator, use make, ninja, whatever. # ... # profit? To use vcpkg, add -DCMAKE_TOOLCHAIN_FILE=$VCPKG/scripts/buildsystems/vcpkg.cmake to the first CMake invocation (clue: the one with -B build ). For now, you'll get one collab3-host executable in the build root. This is the one you should run. Building Collab3 Monorepo Documentation Note that usually you won't have to do this, as the web site will update upon any changes to documentation. For development purposes though: You'll need to install mkdocs via pip. Run mkdocs build . The resulting output will be in site/ , and you can host this wherever you want.","title":"Building Collab3"},{"location":"building/#notice","text":"Windows is not supported by the Collab3 developers, and the project will not configure if targeting a Windows platform. This is an intentional change, and it will not be reverted until: DBus p2p works on Windows Windows QEMU supports modules, and passing handles to and from QEMU and another process","title":"Notice"},{"location":"building/#dependencies","text":"GCC 11+ or Clang 14+ are recommended compiler versions, however newer versions are acceptable too. Libraries: Boost 1.75 or above fmt spdlog You can use either system library versions (if preferred) or use vcpkg for the grunt of them.","title":"Dependencies"},{"location":"building/#building-collab3-monorepo-c-code","text":"$ cmake -B build -GNinja -DCMAKE_BUILD_TYPE=Release $ cd build $ cmake --build . # or if you know your generator, use make, ninja, whatever. # ... # profit? To use vcpkg, add -DCMAKE_TOOLCHAIN_FILE=$VCPKG/scripts/buildsystems/vcpkg.cmake to the first CMake invocation (clue: the one with -B build ). For now, you'll get one collab3-host executable in the build root. This is the one you should run.","title":"Building Collab3 Monorepo C++ Code"},{"location":"building/#building-collab3-monorepo-documentation","text":"Note that usually you won't have to do this, as the web site will update upon any changes to documentation. For development purposes though: You'll need to install mkdocs via pip. Run mkdocs build . The resulting output will be in site/ , and you can host this wherever you want.","title":"Building Collab3 Monorepo Documentation"},{"location":"usage/","text":"TODO This page is under construction","title":"Collab3 Setup"},{"location":"usage/#todo","text":"This page is under construction","title":"TODO"}]}